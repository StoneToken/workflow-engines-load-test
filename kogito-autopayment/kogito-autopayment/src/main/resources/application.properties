# Packaging
# quarkus.package.type=fast-jar

# Disable dev services
quarkus.devservices.enabled=false
# quarkus.http.port=8082

# Maximum Java heap to be used during the native image generation
quarkus.native.native-image-xmx=4g
quarkus.log.level=INFO

#https://quarkus.io/guides/openapi-swaggerui
quarkus.http.cors=true
quarkus.smallrye-openapi.path=/docs/openapi.json
quarkus.swagger-ui.always-include=true

kogito.service.url=http://kogito-autopayment:8080
kogito.dataindex.http.url=http://data-index:8180
kogito.dataindex.ws.url=ws://data-index:8180

#Job-service
kogito.jobs-service.url=http://jobs-service:8580

# Persistence
# Infinispan profile
%infinispan.kogito.persistence.type=infinispan
%infinispan.quarkus.infinispan-client.server-list=infinispan:11222
%infinispan.quarkus.infinispan-client.use-auth=false

# Postgresql profile
%postgresql.kogito.persistence.type=postgresql
%postgresql.quarkus.datasource.username=kogito
%postgresql.quarkus.datasource.password=kogito
%postgresql.quarkus.datasource.reactive.url=postgresql://postgresql:5432/kogito
%postgresql.kogito.persistence.auto.ddl=true
%postgresql.kogito.persistence.optimistic.lock=true

# Kafka profile, you need to manually create topic kogito.process for kafka persistence to work
%kafka.kogito.persistence.type=kafka
# If you want to use separate kafka for persistence
# %kafka.quarkus.kafka-streams.bootstrap-servers=kafka:9092
%kafka.quarkus.kafka-streams.application-id=kogito-autopayment
%kafka.kafka-streams.consumer.session.timeout.ms=250
%kafka.kafka-streams.consumer.heartbeat.interval.ms=200

# Mongo profile
%mongo.kogito.persistence.type=mongodb
%mongo.quarkus.mongodb.connection-string = mongodb://kogito:kogito@mongodb:27017
%mongo.quarkus.mongodb.database=kogito
%mongo.kogito.persistence.optimistic.lock=true

# Kafkas
kafka.bootstrap.servers=kafka:9092

# For message start event
# mp.messaging.incoming.paymentattempt.connector=smallrye-kafka
# mp.messaging.incoming.paymentattempt.topic=paymentattempt
# mp.messaging.incoming.paymentattempt.group.id=kogito-autopayment
# mp.messaging.incoming.paymentattempt.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

mp.messaging.incoming.interruptexecutionmessage.connector=smallrye-kafka
mp.messaging.incoming.interruptexecutionmessage.topic=interruptexecutionmessage
mp.messaging.incoming.interruptexecutionmessage.group.id=kogito-autopayment
mp.messaging.incoming.interruptexecutionmessage.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
# mp.messaging.incoming.interruptexecutionmessage.auto.offset.reset=earliest

mp.messaging.outgoing.payment.connector=smallrye-kafka
mp.messaging.outgoing.payment.topic=payment
mp.messaging.outgoing.payment.group.id=kogito-autopayment
mp.messaging.outgoing.payment.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.incoming.processedpayment.connector=smallrye-kafka
mp.messaging.incoming.processedpayment.topic=processedpayment
mp.messaging.incoming.processedpayment.group.id=kogito-autopayment
mp.messaging.incoming.processedpayment.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
# mp.messaging.incoming.processedpayment.auto.offset.reset=earliest

mp.messaging.outgoing.kogito-processinstances-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-processinstances-events.topic=kogito-processinstances-events
mp.messaging.outgoing.kogito-processinstances-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.kogito-variables-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-variables-events.topic=kogito-variables-events
mp.messaging.outgoing.kogito-variables-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer