id: sequential
version: "1.0"
specVersion: "0.8"
name: Sequential REST Serverless Workflow
description: Workflow for executing sequential REST calls
dataInputSchema:
  schema: specs/UsernameSchema.json
  failOnValidationErrors: true
start: Process
functions:
  - name: getUserByNameFunction
    operation: specs/petstore.yaml#getUserByName
states:
  - name: Process
    actionMode: sequential
    type: operation
    actions:
      - name: getUserByName
        functionRef:
          refName: getUserByNameFunction
          arguments:
            username: ${ .username }
        actionDataFilter:
          toStateData: ${ .user0 }
      - name: getUserByName
        functionRef:
          refName: getUserByNameFunction
          arguments:
            username: ${ .username }
        actionDataFilter:
          toStateData: ${ .user1 }
      - name: getUserByName
        functionRef:
          refName: getUserByNameFunction
          arguments:
            username: ${ .username }
        actionDataFilter:
          toStateData: ${ .user2 }
      - name: getUserByName
        functionRef:
          refName: getUserByNameFunction
          arguments:
            username: ${ .username }
        actionDataFilter:
          toStateData: ${ .user3 }
      - name: getUserByName
        functionRef:
          refName: getUserByNameFunction
          arguments:
            username: ${ .username }
        actionDataFilter:
          toStateData: ${ .user4 }
      - name: getUserByName
        functionRef:
          refName: getUserByNameFunction
          arguments:
            username: ${ .username }
        actionDataFilter:
          toStateData: ${ .user5 }
      - name: getUserByName
        functionRef:
          refName: getUserByNameFunction
          arguments:
            username: ${ .username }
        actionDataFilter:
          toStateData: ${ .user6 }
    stateDataFilter:
      output: ${ [.user0, .user1, .user2, .user3, .user4, .user5, .user6] }
    end: true
